[
  {
    "objectID": "da27-28.html",
    "href": "da27-28.html",
    "title": "ESS 330 Daily Assignment 27 + 28",
    "section": "",
    "text": "library(sf)\n\nWarning: package 'sf' was built under R version 4.4.3\n\n\nLinking to GEOS 3.13.0, GDAL 3.10.1, PROJ 9.5.1; sf_use_s2() is TRUE\n\nlibrary(osmdata)\n\nWarning: package 'osmdata' was built under R version 4.4.3\n\n\nData (c) OpenStreetMap contributors, ODbL 1.0. https://www.openstreetmap.org/copyright\n\n\n\nDefine River Object\n\n#1: Load data for waterways in Fort Collins \n\n# remotes::install_github(\"mikejohnson51/AOI\")\nfc = AOI::geocode(\"Fort Collins\", bbox = TRUE) \n\nfoco_rivers &lt;- osmdata::opq(st_bbox(st_transform(fc,4326))) |&gt; \n  add_osm_feature(\"waterway\") |&gt; \n  osmdata_sf()\n\n\n#2 \nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(sf)\n# Step 1: Filter for \"Cache la Poudre River\"\npoudre_river &lt;- foco_rivers$osm_lines %&gt;%\n  filter(grepl(\"Cache la Poudre\", name, ignore.case = TRUE))\n\n# Step 2: Merge the lines into a single geometry\npoudre_merged &lt;- st_union(poudre_river)\n\n# Step 3: Convert to an sf object\npoudre_merged_sf &lt;- st_as_sf(poudre_merged)\n\nnames(poudre_merged_sf)[1] &lt;- \"geometry\"\nst_geometry(poudre_merged_sf) &lt;- \"geometry\"\n\n\n#3 \npoudre_projected &lt;- st_transform(poudre_merged_sf, crs = 26913)\n\npoudre_length_m &lt;- st_length(poudre_projected)\npoudre_length_km &lt;- as.numeric(poudre_length_m) / 1000\n\n# Print the result\nprint(paste(\"Length in meters:\", round(poudre_length_m, 2)))\n\n[1] \"Length in meters: 218284.21\"\n\nprint(paste(\"Length in kilometers:\", round(poudre_length_km, 2)))\n\n[1] \"Length in kilometers: 218.28\"\n\n\n\n#4\n# Convert to points\npoudre_pts &lt;- st_cast(poudre_projected, \"POINT\")\nhead(poudre_pts)\n\nSimple feature collection with 6 features and 0 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 495970 ymin: 4491791 xmax: 496082.3 ymax: 4492150\nProjected CRS: NAD83 / UTM zone 13N\n                  geometry\n1 POINT (495992.6 4491791)\n2   POINT (495970 4491816)\n3 POINT (495986.9 4491942)\n4 POINT (496023.3 4492081)\n5 POINT (496036.5 4492116)\n6 POINT (496082.3 4492150)\n\n\n\n\nDefine DEM Object\n\n#5 \nlibrary(terra)\n\nWarning: package 'terra' was built under R version 4.4.3\n\n\nterra 1.8.42\n\nlibrary(glue)\n\nWarning: package 'glue' was built under R version 4.4.3\n\n\n\nAttaching package: 'glue'\n\n\nThe following object is masked from 'package:terra':\n\n    trim\n\n# Load DEM from GitHub using vsicurl\nurl &lt;- 'https://raw.githubusercontent.com/mikejohnson51/csu-ess-330/refs/heads/main/resources/foco-elev-cm.tif'\ndem &lt;- rast(glue(\"/vsicurl/{url}\"))\n\n\n\nExtract River Profile\n\n#6\n\n# Reproject the points to the DEM CRS\npoudre_pts_proj &lt;- st_transform(poudre_pts, crs(dem))\n\n# Extract elevation values using terra\npoudre_pts_vect &lt;- terra::vect(poudre_pts_proj)\nelev_vals &lt;- terra::extract(dem, poudre_pts_vect)\n\n# Combine the elevation values with the reprojected points\npoudre_pts_with_elev &lt;- dplyr::bind_cols(poudre_pts_proj, elev_vals[, -1])\n\nNew names:\nâ€¢ `` -&gt; `...2`\n\n# Add a clean ID column (if not already there)\npoudre_pts_with_elev &lt;- poudre_pts_with_elev |&gt; dplyr::mutate(ID = dplyr::row_number())\n\n# Confirm it worked\nhead(poudre_pts_with_elev)\n\nSimple feature collection with 6 features and 2 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -758330.8 ymin: 1987730 xmax: -758188.1 ymax: 1988082\nProjected CRS: unnamed\n    ...2                  geometry ID\n1 150035 POINT (-758310.8 1987730)  1\n2 150017 POINT (-758330.8 1987757)  2\n3 150050 POINT (-758302.2 1987882)  3\n4 150050   POINT (-758253 1988019)  4\n5 150058 POINT (-758236.7 1988052)  5\n6 150050 POINT (-758188.1 1988082)  6\n\n\n\n#7\n# Combine the spatial river points with the extracted elevation values using bind_cols\npoudre_pts_with_elev &lt;- bind_cols(poudre_pts_proj, elev_vals)\n\n# View the first few rows to check the result\nhead(poudre_pts_with_elev)\n\nSimple feature collection with 6 features and 2 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -758330.8 ymin: 1987730 xmax: -758188.1 ymax: 1988082\nProjected CRS: unnamed\n  ID    dem                  geometry\n1  1 150035 POINT (-758310.8 1987730)\n2  2 150017 POINT (-758330.8 1987757)\n3  3 150050 POINT (-758302.2 1987882)\n4  4 150050   POINT (-758253 1988019)\n5  5 150058 POINT (-758236.7 1988052)\n6  6 150050 POINT (-758188.1 1988082)\n\n\n\n#8\npoudre_pts_with_elev &lt;- poudre_pts_with_elev %&gt;%\n  mutate(ID = seq(1, n()))\n\n# View the updated data\nhead(poudre_pts_with_elev)\n\nSimple feature collection with 6 features and 2 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -758330.8 ymin: 1987730 xmax: -758188.1 ymax: 1988082\nProjected CRS: unnamed\n  ID    dem                  geometry\n1  1 150035 POINT (-758310.8 1987730)\n2  2 150017 POINT (-758330.8 1987757)\n3  3 150050 POINT (-758302.2 1987882)\n4  4 150050   POINT (-758253 1988019)\n5  5 150058 POINT (-758236.7 1988052)\n6  6 150050 POINT (-758188.1 1988082)\n\n\n\n\nCompute Sinuosity\n\n#9 \n# Get the first and last points\nfirst_point &lt;- poudre_pts_with_elev[1, ]\nlast_point &lt;- poudre_pts_with_elev[nrow(poudre_pts_with_elev), ]\n\n# Compute the straight-line distance between the first and last points\ndistance_meters &lt;- st_distance(first_point, last_point)\n\n# Print the distance in meters\nprint(paste(\"Straight-line distance in meters:\", as.numeric(distance_meters)))\n\n[1] \"Straight-line distance in meters: 12785.3063889179\"\n\n\n\n#10 \n# Get the length of the river in meters (or use kilometers if preferred)\nriver_length_m &lt;- as.numeric(poudre_length_m)\n\n# Calculate sinuosity\nsinuosity &lt;- river_length_m / as.numeric(distance_meters)\n\n# Print the sinuosity value\nprint(paste(\"Sinuosity of the river:\", round(sinuosity, 2)))\n\n[1] \"Sinuosity of the river: 17.07\"\n\n## Report meaning: With a value greater than 1, the sinuoaity indicades a meandering river which makes sense for the Poudre. \n\n\n\nCompute Slope\n\n# Extract the elevation values at the first and last points\nfirst_elevation &lt;- poudre_pts_with_elev$elevation_cm[1]\nlast_elevation &lt;- poudre_pts_with_elev$elevation_cm[nrow(poudre_pts_with_elev)]\n\n# Compute the change in elevation (in cm)\nchange_in_elevation &lt;- last_elevation - first_elevation\n\n# Convert the river length to centimeters (since it's in meters)\nriver_length_cm &lt;- river_length_m * 100  # 1 meter = 100 centimeters\n\n# Calculate the slope (in cm per cm)\nslope &lt;- change_in_elevation / river_length_cm\n\nslope\n\nnumeric(0)\n\n\n\n#12\nlibrary(ggplot2)\nggplot(poudre_pts_with_elev, aes(x = ID, y = dem)) +  # Using the cleaned column names\n  geom_line(color = \"blue\") +  # Blue line for elevation\n  geom_point(color = \"red\") +  # Red points to highlight individual points\n  labs(\n    title = \"Elevation Along the Cache la Poudre River\",\n    x = \"Point ID (along the river)\",\n    y = \"Elevation (cm)\",\n    subtitle = \"Elevation values along the river as a function of point ID\",\n    caption = \"Data: Cache la Poudre River\"\n  ) +\n  theme_minimal() +  # Clean, minimalist theme\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 16),\n    plot.subtitle = element_text(hjust = 0.5, size = 12),\n    axis.title = element_text(size = 10),\n    axis.text = element_text(size = 10),\n    plot.caption = element_text(size = 6)\n  )\n\nWarning: Removed 4483 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n#13\nlibrary(ggplot2)\nlibrary(scales)\n\n\nAttaching package: 'scales'\n\n\nThe following object is masked from 'package:terra':\n\n    rescale\n\n# Plot the spatial map of the river with elevation as color\nggplot() +\n  geom_sf(data = poudre_pts_with_elev, aes(color = dem), size = 1) + # Plot river points and color by 'dem'\n  scale_color_viridis_c(option = \"plasma\", name = \"Elevation (cm)\") + # Nice color scale, adjust if needed\n  labs(\n    title = \"Cache la Poudre River Profile\",\n    subtitle = \"Spatial map of the river with elevation colored\",\n    caption = \"Data: Cache la Poudre River\"\n  ) +\n  theme_minimal() +  # Use a clean, minimalist theme\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 16),\n    plot.subtitle = element_text(hjust = 0.5, size = 12),\n    axis.title = element_text(size = 12),\n    axis.text = element_text(size = 10),\n    plot.caption = element_text(size = 8)\n  )"
  }
]